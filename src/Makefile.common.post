ifndef OBJS
OBJS=$(CFILES:.c=.o) $(SFILES:.S=.o) $(XSFILES:.s=.o) $(SSFILES:.SS=.o)
endif

GENOBJS = $(GENSRC:.c=.o)

ifndef DEPENDS
DEPENDS=$(OBJS:.o=.d)
endif

GENERATED = $(top_builddir)/src/include/version.hh \
    $(top_builddir)/src/plugin/include/plugin_config.hh

ifneq ($(GENHDRS),)
GENERATED += $(GENHDRS)
ALL_CPPFLAGS += -iquote .
endif

LIB:=$(BINPATH)/lib/lib$(LIBNAME).a

AR=ar

lib: $(LIB)

$(BINPATH) $(BINPATH)/bin $(BINPATH)/commands $(BINPATH)/lib:
	mkdir -p $@

$(BINPATH)/bat: | $(BINPATH)
	ln -sfT ../src/bindist/bat $@

$(top_builddir)/commands: | $(BINPATH)/commands $(BINPATH)/bat
	rm -rf $@
	mkdir $@
	mkdir $@/dosemu
	ln -sf ../src/bindist/fdppconf.sys $@/fdppconf.sys
	ln -sf ../src/bindist/fdppauto.bat $@/fdppauto.bat
	for i in `ls $(BINPATH)/bat/`; do ln -sfT ../../$(THISVERSION)/bat/$$i $@/dosemu/$$i; done

$(top_builddir)/bin: | $(BINPATH)/bin
	rm -f $@
	ln -sf $(THISVERSION)/bin $@

$(top_builddir)/lib: | $(BINPATH)/lib
	rm -f $@
	ln -sf $(THISVERSION)/lib $@

GIT_REV := $(shell $(REALTOPDIR)/git-rev.sh $(REALTOPDIR) $(top_builddir))
.LOW_RESOLUTION_TIME: $(GIT_REV)
$(top_builddir)/src/include/version.hh: $(top_builddir)/Makefile.conf $(REALTOPDIR)/VERSION $(GIT_REV)
	echo "Updating version.h"; \
	echo "#ifndef	VERSION_HH" > $@; \
	echo "#define	VERSION_HH" >> $@; \
	echo "#define	VERSTR	\"$(PACKAGE_VERSION)\"" >> $@; \
	echo "#define	VERSION_NUM	$(VERSION)" >> $@; \
	echo "#define	SUBLEVEL	$(SUBLEVEL)" >> $@; \
	echo "#define	PATCHLEVEL1	\"$(PATCHLEVEL1)\"" >> $@; \
	echo "#define	REVISION	$(REVISION)" >> $@; \
	echo "#define	VERDATE \"$(RELEASE_DATE)\"" >> $@; \
	echo "#endif /* VERSION_H */" >> $@

$(LIB): $(OBJS) $(GENOBJS) | $(BINPATH)/lib
	rm -f $@
	$(AR) cr $@ $^
	$(RANLIB) $@

.PHONY:	clean realclean lib echo all install default

# Use wildcards instead of OBJS and DEPENDS because they may depend on
# a make target. The reason is that on clean we do not include Makefile.conf.
clean::
	-rm -f *.o $(LIB) $(GENSRC) *.d $(GENHDRS) configure *~

realclean:: clean
	rm -rf autom4te*.cache
	rm -f Makefile.conf config.log config.status configure aclocal.m4
	rm -rf plugin/include

$(OBJS): $(GENERATED)
$(GENOBJS): $(GENSRC)

%.o: %.c
	$(CC) -c $(ALL_CPPFLAGS) $(ALL_CFLAGS) -o $@ $<

%.o: %.s $(top_builddir)/src/include/version.hh
	$(CPP) $(ALL_CPPFLAGS) -x assembler-with-cpp $< | $(XAS) $(XASFLAGS) -o $@

VS = $(subst .,_,$(notdir $(1)))_START

%.o: %.S $(top_builddir)/src/include/version.hh
	$(CPP) $(ALL_CPPFLAGS) -x assembler-with-cpp $< | $(XAS) $(XASFLAGS) -o _$@
	$(AS_LD) $(AS_LDFLAGS) -static $(if $($(call VS,$<)), \
		--section-start .text=$($(call VS,$<))) -o $@.elf _$@
	$(XOBJCOPY) -j .text -O binary $@.elf $@.bin
	$(OBJCOPY) -I binary -O $(O_BDFARCH) \
		--add-section .note.GNU-stack=/dev/null $@.bin $@_
	nm -g -n _$@ | gawk '\
		BEGIN {\
		  print "// Warning: autogenerated";\
	          print "";\
	          print "#include \"$(srcdir)/$(@:.o=)_offsets.h\"";\
		}\
		{\
		  HEXSTR = sprintf("0x%s", $$1);\
		  ADDR = strtonum(HEXSTR) $(if $($(call VS,$<)),+ $($(call VS,$<)));\
		  if ($$3 != "_start") {\
		    printf "const unsigned %s = 0x%04x;\n", $$3, ADDR;\
		  }\
		}\
		END {\
		  print "";\
		}\
		' > $@_offsets.c
	$(CC) -c -o $@_offsets.o $@_offsets.c
	$(HOST_LD) -r -o $@ $@_offsets.o $@_
	$(RM) _$@ $@_ $@.bin $@.elf $@_offsets.c $@_offsets.o

%.o: %.SS
	$(CPP) $(ALL_CPPFLAGS) -x assembler-with-cpp $< | $(AS) $(ASFLAGS) -o $@

ifndef CLEANING
ifneq "$(wildcard *.d)" ""
-include $(DEPENDS)
endif
endif

$(top_builddir)/Makefile.conf: $(REALTOPDIR)/configure
	cd $(top_builddir) && $(REALTOPDIR)/configure
Makefile.conf: configure
	./configure
configure: configure.ac
	$(REALTOPDIR)/scripts/aconf.sh $(REALTOPDIR) $(srcdir)
.SECONDARY: configure
$(top_builddir)/src/plugin/include/plugin_config.hh:
	cd $(top_builddir) && $(REALTOPDIR)/scripts/mkpluginhooks

# this is mainly for debugging the makefile
echo::
	@echo REALTOPDIR=$(REALTOPDIR)
	@echo TOPDIR=$(TOPDIR)
	@echo LIB=$(LIB)
	@echo DEPENDS=$(DEPENDS)
	@echo OBJS=$(OBJS)
	@echo CFILES = $(wildcard *.c)
	@echo DEPENDS FOUND= $(wildcard *.d)
	@echo MAKEFLAGS=$(MAKEFLAGS)
